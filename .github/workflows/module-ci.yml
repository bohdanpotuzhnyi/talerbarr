name: Module CI • Dolibarr full tests (PHP 7.1 • MySQL)

on:
  pull_request:
    types: [opened, reopened, synchronize]
  push:
    branches:
      - develop
      - main
      - '1*'
      - '2*'
  workflow_dispatch:

permissions:
  contents: read

jobs:
  github_ci_php71_mysql_with_module:
    runs-on: ubuntu-latest

    services:
      mysql:
        image: mysql:5.7
        env:
          MYSQL_ROOT_PASSWORD: password
        ports:
          - 32574:3306

    steps:
      # 0) Dolibarr core
      - name: Clone Dolibarr core (develop)
        run: |
          git clone --depth=1 https://github.com/Dolibarr/dolibarr.git dolibarr
          ls -al dolibarr

      # 1) Your module repo (this repo)
      - name: Checkout module repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 1
          path: dolibarr/htdocs/custom/talerbarr

      - name: Version PHP (runner default)
        run: php -i | head -

      # 3) Install PHP 7.1 toolchain + composer tools (PHPUnit 7.5, etc.)
      - name: Install packages for PHP 7.1
        run: |
          sudo composer self-update 2.2.18
          sudo chmod -R a+rwx /home/runner

          # Keep Dolibarr vendor tools under htdocs/includes (global composer config like upstream)
          (cd dolibarr && composer -n config -g vendor-dir htdocs/includes)

          sudo add-apt-repository -y ppa:ondrej/php
          sudo apt-get update
          sudo apt-get install -y pgloader memcached
          sudo apt-get install -y \
            apache2 php7.1 php7.1-cli php7.1-curl php7.1-mysql php7.1-pgsql \
            php7.1-gd php7.1-imap php7.1-intl php7.1-ldap php7.1-xml \
            php7.1-mbstring php7.1-zip libapache2-mod-php7.1
          sudo update-alternatives --set php /usr/bin/php7.1
          php -i | head -

          cd dolibarr
          composer -n require --ignore-platform-reqs \
            phpunit/phpunit ^7.5 \
            php-parallel-lint/php-parallel-lint ^1 \
            php-parallel-lint/php-console-highlighter ^0 \
            php-parallel-lint/php-var-dump-check ~0.4 \
            squizlabs/php_codesniffer ^3
          # cleanup html coverage reporter dirs like upstream
          sudo rm -fr htdocs/includes/phpunit/php-code-coverage/src/Report/Html

      - name: Version information
        run: |
          composer -V
          echo "Parallel-lint version"
          dolibarr/htdocs/includes/bin/parallel-lint -V
          echo "PHPCS version"
          dolibarr/htdocs/includes/bin/phpcs --version | head -
          dolibarr/htdocs/includes/bin/phpcs -i | head -
          echo "PHP Vardump check version"
          dolibarr/htdocs/includes/bin/var-dump-check --version
          echo "PHPUnit version"
          dolibarr/htdocs/includes/bin/phpunit --version | head -
          echo "Apache version"
          apache2 -v | head -
          echo "MySQL client version"
          mysql --version | head -

      # 4) DB init (MySQL 5.7 like Dolibarr’s CI)
      - name: Create database
        run: |
          sudo apt-get install -y mysql-client
          mysql --host 127.0.0.1 --port 32574 -uroot -ppassword -e "SELECT VERSION();" | head -
          mysql --host 127.0.0.1 --port 32574 -uroot -ppassword -e 'DROP DATABASE IF EXISTS travis;'
          mysql --host 127.0.0.1 --port 32574 -uroot -ppassword -e "CREATE DATABASE IF NOT EXISTS travis CHARACTER SET 'utf8';"
          mysql --host 127.0.0.1 --port 32574 -uroot -ppassword -e "CREATE USER IF NOT EXISTS 'travis'@'127.0.0.1' IDENTIFIED BY 'password';"
          mysql --host 127.0.0.1 --port 32574 -uroot -ppassword -e "GRANT ALL PRIVILEGES ON travis.* TO travis@127.0.0.1; FLUSH PRIVILEGES;"
          # Load Dolibarr demo dump like upstream
          mysql --host 127.0.0.1 --port 32574 -uroot -ppassword -D travis < dolibarr/dev/initdemo/mysqldump_dolibarr_3.5.0.sql
          mysql --host 127.0.0.1 --port 32574 -uroot -ppassword -D travis -e "UPDATE llx_const SET value='0666' WHERE name='MAIN_UMASK';"

      # ----- Option A: wire Dolibarr into /var/www BEFORE writing conf.php
      - name: Wire Dolibarr into /var/www
        run: |
          sudo mkdir -p /var/www/html
          sudo cp -r dolibarr/htdocs/. /var/www/html
          sudo ln -fs /var/www/html /var/www/htdocs
          sudo cp -r dolibarr/test/. /var/www/test
          sudo cp -r dolibarr/dev/. /var/www/dev
          sudo cp -r dolibarr/scripts/. /var/www/scripts
          sudo chown -R www-data:www-data /var/www/html

      # 5) Drop your module into Dolibarr /custom
      - name: Add our module into Dolibarr
        run: |
          sudo mkdir -p /var/www/html/custom
          sudo cp -r ./ /var/www/html/custom/talerbarr
          sudo chown -R www-data:www-data /var/www/html/custom/talerbarr
          ls -al /var/www/html/custom

      # 6) App configuration (MySQL)
      - name: Generate Dolibarr conf.php
        run: |
          sudo install -d -m 0777 /var/www/html/conf
          sudo tee /var/www/html/conf/conf.php > /dev/null <<'PHP'
          <?php
          $dolibarr_main_url_root='http://127.0.0.1';
          $dolibarr_main_document_root='/var/www/html';
          $dolibarr_main_data_root='/var/www/html/documents';
          $dolibarr_main_db_host='127.0.0.1';
          $dolibarr_main_db_name='travis';
          $dolibarr_main_db_user='root';
          $dolibarr_main_db_pass='password';
          $dolibarr_main_instance_unique_id='travis1234567890';
          $dolibarr_main_db_type='mysqli';
          $dolibarr_main_db_port='32574';
          $dolibarr_main_authentication='dolibarr';
          PHP
          sudo mkdir -p /var/www/html/documents/admin/temp
          sudo chmod -R a+rwx /var/www/html/documents

      - name: Generate install.forced.php (to test installation)
        run: |
          sudo tee /var/www/html/install/install.forced.php > /dev/null <<'PHP'
          <?php
          $force_install_noedit=2;
          $force_install_type='mysqli';
          $force_install_dbserver='127.0.0.1';
          $force_install_database='travis';
          $force_install_databaselogin='root';
          $force_install_databasepass='password';
          $force_install_port='32574';
          $force_install_prefix='llx_';
          $force_install_createdatabase=false;
          $force_install_createuser=false;
          $force_install_mainforcehttps=false;
          $force_install_main_data_root='/var/www/html';
          PHP

      # 7) Web server like upstream
      - name: Setup Apache
        run: |
          sudo a2ensite 000-default
          sudo a2enmod php7.1
          sudo adduser $(whoami) www-data
          sudo adduser $(whoami) root
          sudo adduser root www-data
          sudo chown -R www-data:www-data /etc/apache2/sites-available/
          sudo chmod -R 777 /etc/apache2/sites-available/
          sudo chown -R www-data:www-data /var/www/html/
          sudo service apache2 restart
          curl -I localhost || true

      - name: Check Apache availability
        run: |
          set +e
          wget -O - --debug http://127.0.0.1 > $GITHUB_WORKSPACE/test.html 2>&1 || true
          head -n 200 $GITHUB_WORKSPACE/test.html || true
          echo "Logs..."
          sudo cat /var/log/apache2/access.log || true
          sudo cat /var/log/apache2/error.log || true
          sudo cat /var/log/apache2/other_vhosts_access.log || true

      # 8) Perform Dolibarr upgrade chain (same as CI)
      - name: Upgrading Dolibarr (full chain)
        run: |
          set -e
          sudo chmod -R a+rwx $GITHUB_WORKSPACE
          sudo chmod -R a+rwx /var/www
          cd /var/www/html/install

          php upgrade.php 3.5.0 3.6.0 ignoredbversion > $GITHUB_WORKSPACE/upgrade350360.log
          php upgrade2.php 3.5.0 3.6.0 > $GITHUB_WORKSPACE/upgrade350360-2.log
          php step5.php 3.5.0 3.6.0 > $GITHUB_WORKSPACE/upgrade350360-3.log

          php upgrade.php 3.6.0 3.7.0 ignoredbversion > $GITHUB_WORKSPACE/upgrade360370.log
          php upgrade2.php 3.6.0 3.7.0 > $GITHUB_WORKSPACE/upgrade360370-2.log
          php step5.php 3.6.0 3.7.0 > $GITHUB_WORKSPACE/upgrade360370-3.log

          php upgrade.php 3.7.0 3.8.0 ignoredbversion > $GITHUB_WORKSPACE/upgrade370380.log
          php upgrade2.php 3.7.0 3.8.0 > $GITHUB_WORKSPACE/upgrade370380-2.log
          php step5.php 3.7.0 3.8.0 > $GITHUB_WORKSPACE/upgrade370380-3.log

          php upgrade.php 3.8.0 3.9.0 ignoredbversion > $GITHUB_WORKSPACE/upgrade380390.log
          php upgrade2.php 3.8.0 3.9.0 > $GITHUB_WORKSPACE/upgrade380390-2.log
          php step5.php 3.8.0 3.9.0 > $GITHUB_WORKSPACE/upgrade380390-3.log

          php upgrade.php 3.9.0 4.0.0 ignoredbversion > $GITHUB_WORKSPACE/upgrade390400.log
          php upgrade2.php 3.9.0 4.0.0 > $GITHUB_WORKSPACE/upgrade390400-2.log
          php step5.php 3.9.0 4.0.0 > $GITHUB_WORKSPACE/upgrade390400-3.log

          php upgrade.php 4.0.0 5.0.0 ignoredbversion > $GITHUB_WORKSPACE/upgrade400500.log
          php upgrade2.php 4.0.0 5.0.0 > $GITHUB_WORKSPACE/upgrade400500-2.log
          php step5.php 4.0.0 5.0.0 > $GITHUB_WORKSPACE/upgrade400500-3.log

          php upgrade.php 5.0.0 6.0.0 ignoredbversion > $GITHUB_WORKSPACE/upgrade500600.log
          php upgrade2.php 5.0.0 6.0.0 > $GITHUB_WORKSPACE/upgrade500600-2.log
          php step5.php 5.0.0 6.0.0 > $GITHUB_WORKSPACE/upgrade500600-3.log

          php upgrade.php 6.0.0 7.0.0 ignoredbversion > $GITHUB_WORKSPACE/upgrade600700.log
          php upgrade2.php 6.0.0 7.0.0 > $GITHUB_WORKSPACE/upgrade600700-2.log
          php step5.php 6.0.0 7.0.0 > $GITHUB_WORKSPACE/upgrade600700-3.log

          php upgrade.php 7.0.0 8.0.0 ignoredbversion > $GITHUB_WORKSPACE/upgrade700800.log
          php upgrade2.php 7.0.0 8.0.0 > $GITHUB_WORKSPACE/upgrade700800-2.log
          php step5.php 7.0.0 8.0.0 > $GITHUB_WORKSPACE/upgrade700800-3.log

          php upgrade.php 8.0.0 9.0.0 ignoredbversion > $GITHUB_WORKSPACE/upgrade800900.log
          php upgrade2.php 8.0.0 9.0.0 > $GITHUB_WORKSPACE/upgrade800900-2.log
          php step5.php 8.0.0 9.0.0 > $GITHUB_WORKSPACE/upgrade800900-3.log

          php upgrade.php 9.0.0 10.0.0 ignoredbversion > $GITHUB_WORKSPACE/upgrade9001000.log
          php upgrade2.php 9.0.0 10.0.0 > $GITHUB_WORKSPACE/upgrade9001000-2.log
          php step5.php 9.0.0 10.0.0 > $GITHUB_WORKSPACE/upgrade9001000-3.log

          php upgrade.php 10.0.0 11.0.0 ignoredbversion > $GITHUB_WORKSPACE/upgrade10001100.log
          php upgrade2.php 10.0.0 11.0.0 > $GITHUB_WORKSPACE/upgrade10001100-2.log
          php step5.php 10.0.0 11.0.0 > $GITHUB_WORKSPACE/upgrade10001100-3.log

          php upgrade.php 11.0.0 12.0.0 ignoredbversion > $GITHUB_WORKSPACE/upgrade11001200.log
          php upgrade2.php 11.0.0 12.0.0 > $GITHUB_WORKSPACE/upgrade11001200-2.log
          php step5.php 11.0.0 12.0.0 > $GITHUB_WORKSPACE/upgrade11001200-3.log

          php upgrade.php 12.0.0 13.0.0 ignoredbversion > $GITHUB_WORKSPACE/upgrade12001300.log
          php upgrade2.php 12.0.0 13.0.0 > $GITHUB_WORKSPACE/upgrade12001300-2.log
          php step5.php 12.0.0 13.0.0 > $GITHUB_WORKSPACE/upgrade12001300-3.log

          php upgrade.php 13.0.0 14.0.0 ignoredbversion > $GITHUB_WORKSPACE/upgrade13001400.log
          php upgrade2.php 13.0.0 14.0.0 > $GITHUB_WORKSPACE/upgrade13001400-2.log
          php step5.php 13.0.0 14.0.0 > $GITHUB_WORKSPACE/upgrade13001400-3.log

          php upgrade.php 14.0.0 15.0.0 ignoredbversion > $GITHUB_WORKSPACE/upgrade14001500.log
          php upgrade2.php 14.0.0 15.0.0 > $GITHUB_WORKSPACE/upgrade14001500-2.log
          php step5.php 14.0.0 15.0.0 > $GITHUB_WORKSPACE/upgrade14001500-3.log

          php upgrade.php 15.0.0 16.0.0 ignoredbversion > $GITHUB_WORKSPACE/upgrade15001600.log
          php upgrade2.php 15.0.0 16.0.0 > $GITHUB_WORKSPACE/upgrade15001600-2.log
          php step5.php 15.0.0 16.0.0 > $GITHUB_WORKSPACE/upgrade15001600-3.log

          php upgrade.php 16.0.0 17.0.0 ignoredbversion > $GITHUB_WORKSPACE/upgrade16001700.log
          php upgrade2.php 16.0.0 17.0.0 > $GITHUB_WORKSPACE/upgrade16001700-2.log
          php step5.php 16.0.0 17.0.0 > $GITHUB_WORKSPACE/upgrade16001700-3.log

          php upgrade.php 17.0.0 18.0.0 ignoredbversion > $GITHUB_WORKSPACE/upgrade17001800.log
          php upgrade2.php 17.0.0 18.0.0 > $GITHUB_WORKSPACE/upgrade17001800-2.log
          php step5.php 17.0.0 18.0.0 > $GITHUB_WORKSPACE/upgrade17001800-3.log

      - name: Result of migration scripts
        if: always()
        run: |
          ls -alrt $GITHUB_WORKSPACE/
          echo "Show content of last file"
          cat "$(ls -rt $GITHUB_WORKSPACE/ | tail -n1)"

      # 9) Enable Dolibarr standard modules and your module
      - name: Enabling modules (including our module)
        run: |
          set -e
          cd /var/www/html/install
          php upgrade2.php 0.0.0 0.0.0 MAIN_MODULE_API,MAIN_MODULE_ProductBatch,MAIN_MODULE_SupplierProposal,MAIN_MODULE_STRIPE,MAIN_MODULE_ExpenseReport > $GITHUB_WORKSPACE/enablemodule.log
          php upgrade2.php 0.0.0 0.0.0 MAIN_MODULE_WEBSITE,MAIN_MODULE_TICKET,MAIN_MODULE_ACCOUNTING,MAIN_MODULE_MRP >> $GITHUB_WORKSPACE/enablemodule.log
          php upgrade2.php 0.0.0 0.0.0 MAIN_MODULE_RECEPTION,MAIN_MODULE_RECRUITMENT >> $GITHUB_WORKSPACE/enablemodule.log
          php upgrade2.php 0.0.0 0.0.0 MAIN_MODULE_KnowledgeManagement,MAIN_MODULE_EventOrganization,MAIN_MODULE_PARTNERSHIP >> $GITHUB_WORKSPACE/enablemodule.log
          php upgrade2.php 0.0.0 0.0.0 MAIN_MODULE_EmailCollector >> $GITHUB_WORKSPACE/enablemodule.log
          # Enable your module
          php upgrade2.php 0.0.0 0.0.0 MAIN_MODULE_TalerBarr >> $GITHUB_WORKSPACE/enablemodule.log
          cd -

      - name: Result of enabling modules scripts
        if: always()
        run: |
          echo "Show content of enablemodule.log file"
          cat $GITHUB_WORKSPACE/enablemodule.log

      # (Optional safety net) load any module SQL files if activation didn't do it
      - name: Load module SQL migrations if present (best-effort)
        run: |
          set +e
          for f in $(find /var/www/html/custom/talerbarr -type f -name '*.sql' 2>/dev/null); do
            echo "Applying $f ..."
            mysql --host 127.0.0.1 --port 32574 -uroot -ppassword -D travis < "$f" || true
          done

      # 10) Run ALL Dolibarr tests (same as upstream)
      - name: Unit testing (all Dolibarr tests)
        run: |
          set -e
          cd /var/www/html
          sudo chmod -R a+rwx /var/www/html/documents
          ./includes/bin/phpunit -d memory_limit=-1 -c /var/www/test/phpunit/phpunittest.xml /var/www/test/phpunit/AllTests.php
          echo "Phpunit return code = $?"
